# -*- coding: utf-8 -*-
"""breast-cancer-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/194EN1zjhsb5TAW5yYJLsm08hLVMYnSUE
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os

import warnings
warnings.filterwarnings('ignore')
import kagglehub

"""### Data Preparation"""

path = kagglehub.dataset_download("yasserh/breast-cancer-dataset")

print("Path to dataset files:", path)

df=pd.read_csv("C:/Users/rizki/.cache/kagglehub/datasets/yasserh/breast-cancer-dataset/versions/1/breast-cancer.csv")
df.columns

df.head()

df.isnull().sum()

df.shape

df.size

"""### EDA"""

df.nunique()

df=df.drop('id',axis=1)

df.describe()

df_corr= df.drop('diagnosis',axis=1)

corr=plt.figure(figsize=(30,20))
sns.heatmap(df_corr.corr(),annot=True,cmap='Blues')

df_mean = df.drop(columns=[col for col in df.columns if '_se' in col or '_worst' in col])
df_se = df.drop(columns=[col for col in df.columns if '_mean' in col or '_worst' in col])
df_worst = df.drop(columns=[col for col in df.columns if '_se' in col or '_mean' in col])

df_se.describe()

sns.pairplot(df_mean, hue='diagnosis', palette='Blues_d')

sns.pairplot(df_se, hue='diagnosis', palette='Blues_d')

sns.pairplot(df_worst, hue='diagnosis', palette='Blues_d')

sns.countplot(x='diagnosis',data=df,palette='Blues_d')

n_cols = 3
n_rows = (len(df_mean.columns) + n_cols - 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 15))
axes = axes.flatten()


for i, col in enumerate(df_mean.columns):
    sns.boxplot(x='diagnosis', y=col, data=df_mean, ax=axes[i])
    axes[i].set_title(f'Boxplot of {col} by Diagnosis')


for j in range(i + 1, n_rows * n_cols):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

n_cols = 3
n_rows = (len(df_se.columns) + n_cols - 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 15))
axes = axes.flatten()


for i, col in enumerate(df_se.columns):
    sns.boxplot(x='diagnosis', y=col, data=df_se, ax=axes[i])
    axes[i].set_title(f'Boxplot of {col} by Diagnosis')


for j in range(i + 1, n_rows * n_cols):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

n_cols = 3
n_rows = (len(df_worst.columns) + n_cols - 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 15))
axes = axes.flatten()


for i, col in enumerate(df_worst.columns):
    sns.boxplot(x='diagnosis', y=col, data=df_worst, ax=axes[i])
    axes[i].set_title(f'Boxplot of {col} by Diagnosis')

# Menghapus subplot yang tidak terpakai
for j in range(i + 1, n_rows * n_cols):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""### Data Preprocessing"""

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
df['diagnosis']=l.fit_transform(df.diagnosis)
df.head()

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_clean = df[~((df < lower_bound) | (df > upper_bound)).any(axis=1)]

from sklearn.model_selection import train_test_split
x=df.drop('diagnosis',axis=1)
y=df['diagnosis']
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
xtrain = scaler.fit_transform(xtrain)
xtest = scaler.transform(xtest)

"""### Modeling"""

from sklearn.metrics import classification_report, confusion_matrix

from sklearn.ensemble import RandomForestClassifier
model_RandomForest = RandomForestClassifier(n_estimators=100, max_depth=3)
model_RandomForest.fit(xtrain, ytrain)
y_pred_RandomForest = model_RandomForest.predict(xtest)

from sklearn.tree import DecisionTreeClassifier

model_DecisionTree = DecisionTreeClassifier(max_depth=3)
model_DecisionTree.fit(xtrain, ytrain)
y_pred_DecisionTree = model_DecisionTree.predict(xtest)

from sklearn.ensemble import AdaBoostClassifier

model_AdaBoost = AdaBoostClassifier(estimator=model_DecisionTree,n_estimators=1000)
model_AdaBoost.fit(xtrain, ytrain)
y_pred = model_AdaBoost.predict(xtest)

"""### Evaluation"""

print("Decision Tree")
print(classification_report(ytest, y_pred_DecisionTree))
print(confusion_matrix(ytest, y_pred_DecisionTree))

print("Decision Tree + Adaboost")
print(classification_report(ytest, y_pred))
print(confusion_matrix(ytest, y_pred))

print("Random Forest")
print(classification_report(ytest, y_pred_RandomForest))
print(confusion_matrix(ytest, y_pred_RandomForest))